import{_ as s,c as l,a as n,o as e}from"./app-BwJKnqoo.js";const t="/assets/faq-api-test-BI92vFhj.png",p="/assets/faq-execution-time1-Dr3MIiYA.png",i="/assets/faq-execution-time2-ot392kpG.png",o="/assets/faq-flame1-Cem30tAq.png",r="/assets/faq-flame2-CLhqK2ov.png",c={};function d(m,a){return e(),l("div",null,a[0]||(a[0]=[n('<h1 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h1><h2 id="关于性能" tabindex="-1"><a class="header-anchor" href="#关于性能"><span>关于性能</span></a></h2><p>我对<a href="https://github.com/stick-i/spel-validator-example" target="_blank" rel="noopener noreferrer">示例项目</a>创建了一组简单的api测试用例，共15个请求，在后面的测试中，我会使用它们来进行测试。</p><p><img src="'+t+'" alt="img_4.png"></p><div class="custom-container tip"><p class="custom-container-title">测试环境</p><ul><li>Mac mini 2023款，M2芯片，16G内存</li><li>示例项目的接口中无业务逻辑，只有参数校验</li><li>SpEL Validator 版本：v0.2.0-beta</li><li>JDK版本：8</li><li>SpringBoot版本：2.7.17</li></ul></div><h3 id="执行耗时" tabindex="-1"><a class="header-anchor" href="#执行耗时"><span>执行耗时</span></a></h3><p>测试条件：</p><ul><li>开启debug日志</li><li>接口未预热</li><li>使用Apifox进行2线程3循环的测试，共90次请求</li></ul><p>测试结果：</p><p>除了前几次请求耗时会达到 10ms 以上， 后续请求耗时会稳定在 0~1ms 左右。</p><p><img src="'+p+'" alt="img_2.png"><img src="'+i+'" alt="img.png"></p><p>其中每条记录表示一次接口调用的完整校验耗时。</p><h3 id="火焰图" tabindex="-1"><a class="header-anchor" href="#火焰图"><span>火焰图</span></a></h3><p>测试条件：</p><ul><li>关闭debug日志</li><li>接口充分预热</li><li>使用 Apifox 进行10线程10循环的测试，共1500次请求</li><li>使用 IDEA 自带的 IntelliJ Profiler 进行分析</li></ul><p>得到如下的火焰图</p><p><img src="'+o+'" alt="img_1.png"></p><p><img src="'+r+`" alt="img_5.png"></p><p>可以看到，本组件的总耗时为170ms，平均每个请求耗时约0.11ms。</p><p>其中解析SpEL表达式的总耗时为110ms，占比约65%。</p><p>随后我在不同的数量的线程和循环次数后重新测试，得到的结果如下：</p><ul><li>5线程100循环，共7500次请求，总耗时约为 930ms，平均每个请求耗时约0.12ms，其中解析SpEL表达式的总耗时为 420ms，占比约45%。</li><li>20线程，30循环，共9000次此请求，总耗时约为 1190ms，平均每个请求耗时约0.13ms，其中解析SpEL表达式的总耗时为 390ms，占比约33%。</li></ul><p>这样看来，目前的性能表现还算可以接受，但还有优化空间，后续会继续优化。</p><h2 id="如何对实体类单独进行校验" tabindex="-1"><a class="header-anchor" href="#如何对实体类单独进行校验"><span>如何对实体类单独进行校验</span></a></h2><p>正常情况下，只需要触发 jakarta.validation-api 的校验，就会顺带触发 spel.validator 的校验。 这一点可以参考下源码的测试工具<code>cn.sticki.spel.validator.jakarta.JakartaSpelValidator.validate</code>的实现，大概是下面这个样子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">    private</span><span style="color:#569CD6;"> static</span><span style="color:#569CD6;"> final</span><span style="color:#4EC9B0;"> Validator</span><span style="color:#9CDCFE;"> validator</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Validation</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">byDefaultProvider</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">configure</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">messageInterpolator</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#DCDCAA;"> ParameterMessageInterpolator</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">buildValidatorFactory</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getValidator</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * 参数校验</span></span>
<span class="line"><span style="color:#6A9955;">     * &lt;p&gt;</span></span>
<span class="line"><span style="color:#6A9955;">     * 调用此方法会触发 jakarta.validation.constraints.* 的校验，类似于使用 @Valid 注解</span></span>
<span class="line"><span style="color:#6A9955;">     *</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@return</span><span style="color:#6A9955;"> 校验结果，如果校验通过则返回空列表</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> static</span><span style="color:#D4D4D4;"> &lt;T&gt; </span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">ConstraintViolation</span><span style="color:#D4D4D4;">&lt;T&gt;&gt; </span><span style="color:#DCDCAA;">validate</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> obj) {</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> validator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">validate</span><span style="color:#D4D4D4;">(obj);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的实体类中只有 spel.validator 的校验注解，或者你只想触发 spel.validator 的校验， 那更简单，你只需要调用 <code>cn.sticki.spel.validator.core.SpelValidExecutor#validateObject</code> 即可触发校验。</p>`,27)]))}const v=s(c,[["render",d],["__file","FAQ.html.vue"]]),y=JSON.parse('{"path":"/guide/FAQ.html","title":"常见问题","lang":"zh-CN","frontmatter":{"description":"常见问题 关于性能 我对示例项目创建了一组简单的api测试用例，共15个请求，在后面的测试中，我会使用它们来进行测试。 img_4.png 测试环境 Mac mini 2023款，M2芯片，16G内存 示例项目的接口中无业务逻辑，只有参数校验 SpEL Validator 版本：v0.2.0-beta JDK版本：8 SpringBoot版本：2.7....","head":[["meta",{"property":"og:url","content":"https://spel-validator.sticki.cn/guide/FAQ.html"}],["meta",{"property":"og:site_name","content":"SpEL Validator"}],["meta",{"property":"og:title","content":"常见问题"}],["meta",{"property":"og:description","content":"常见问题 关于性能 我对示例项目创建了一组简单的api测试用例，共15个请求，在后面的测试中，我会使用它们来进行测试。 img_4.png 测试环境 Mac mini 2023款，M2芯片，16G内存 示例项目的接口中无业务逻辑，只有参数校验 SpEL Validator 版本：v0.2.0-beta JDK版本：8 SpringBoot版本：2.7...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-07T11:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-07T11:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-07T11:02:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"关于性能","slug":"关于性能","link":"#关于性能","children":[{"level":3,"title":"执行耗时","slug":"执行耗时","link":"#执行耗时","children":[]},{"level":3,"title":"火焰图","slug":"火焰图","link":"#火焰图","children":[]}]},{"level":2,"title":"如何对实体类单独进行校验","slug":"如何对实体类单独进行校验","link":"#如何对实体类单独进行校验","children":[]}],"git":{"updatedTime":1730977358000,"contributors":[{"name":"阿杆","email":"sticki@qq.com","commits":3}]},"autoDesc":true,"filePathRelative":"guide/FAQ.md"}');export{v as comp,y as data};
