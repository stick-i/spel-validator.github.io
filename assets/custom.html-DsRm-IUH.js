import{_ as e,c as p,a as o,b as n,d as a,e as t,w as c,r,o as i}from"./app-B2IiQkpQ.js";const D={};function d(y,s){const l=r("RouteLink");return i(),p("div",null,[s[5]||(s[5]=o(`<h1 id="自定义约束注解" tabindex="-1"><a class="header-anchor" href="#自定义约束注解"><span>自定义约束注解</span></a></h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果你使用过 <code>jakarta.validation-api</code> 的自定义约束注解，那么你会发现 <code>SpEL Validator</code> 的自定义约束注解几乎与 <code>jakarta.validation-api</code> 一致。</p></div><p>下面以 <code>@SpelNotBlank</code> 为例，展示如何实现自定义约束注解。</p><h2 id="创建约束注解类" tabindex="-1"><a class="header-anchor" href="#创建约束注解类"><span>创建约束注解类</span></a></h2><p>每个约束注释必须包含以下属性:</p><ul><li><code>String message() default &quot;&quot;;</code> 用于指定约束校验失败时的错误消息。</li><li><code>String condition() default &quot;&quot;;</code> 用于指定约束开启条件的SpEL表达式。</li><li><code>String[] group() default {};</code> 用于指定分组条件的SpEL表达式。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Documented</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Retention</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">RetentionPolicy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">RUNTIME</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Target</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ElementType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">FIELD</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Repeatable</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">SpelNotBlank</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">List</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> @</span><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> SpelNotBlank</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">  String</span><span style="color:#DCDCAA;"> message</span><span style="color:#D4D4D4;">() </span><span style="color:#C586C0;">default</span><span style="color:#CE9178;"> &quot;不能为空字符串&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">  String</span><span style="color:#DCDCAA;"> condition</span><span style="color:#D4D4D4;">() </span><span style="color:#C586C0;">default</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">  String</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">group</span><span style="color:#D4D4D4;">() </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#4EC9B0;">Target</span><span style="color:#D4D4D4;">(FIELD)</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#4EC9B0;">Retention</span><span style="color:#D4D4D4;">(RUNTIME)</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#4EC9B0;">Documented</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> List</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">    SpelNotBlank</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">value</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建约束验证器" tabindex="-1"><a class="header-anchor" href="#创建约束验证器"><span>创建约束验证器</span></a></h2><p>创建类 <code>SpelNotBlankValidator</code>，实现 <code>SpelConstraintValidator&lt;T&gt;</code> 接口，其中泛型 <code>T</code> 为要校验的约束注解类，在这里是 <code>SpelNotBlank</code>。</p><p>实现 <code>isValid</code> 方法，校验逻辑在该方法中实现。</p><p><code>isValid</code> 方法的参数说明如下：</p><ul><li><code>annotation</code>：当前约束注解的实例。</li><li><code>obj</code>：当前校验的根对象。</li><li><code>field</code>：当前校验的字段。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> SpelNotBlankValidator</span><span style="color:#569CD6;"> implements</span><span style="color:#4EC9B0;"> SpelConstraintValidator</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">SpelNotBlank</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#4EC9B0;"> FieldValidResult</span><span style="color:#DCDCAA;"> isValid</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">SpelNotBlank</span><span style="color:#9CDCFE;"> annotation</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Object</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Field</span><span style="color:#9CDCFE;"> field</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#4EC9B0;"> IllegalAccessException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#4EC9B0;">    CharSequence</span><span style="color:#9CDCFE;"> fieldValue</span><span style="color:#D4D4D4;"> = (CharSequence) </span><span style="color:#9CDCFE;">field</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(obj);</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#C586C0;"> new</span><span style="color:#DCDCAA;"> FieldValidResult</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">StringUtils</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasText</span><span style="color:#D4D4D4;">(fieldValue));</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>一般情况下，只需要校验当前字段的值，通过 <code>field.get(obj)</code> 即可获取。</p><p>有些约束注解可能仅支持特定类型的字段，可以通过重写 <code>supportType()</code> 方法来指定支持的类型。默认情况下，支持所有类型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> SpelNotBlankValidator</span><span style="color:#569CD6;"> implements</span><span style="color:#4EC9B0;"> SpelConstraintValidator</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">SpelNotBlank</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#4EC9B0;"> FieldValidResult</span><span style="color:#DCDCAA;"> isValid</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">SpelNotBlank</span><span style="color:#9CDCFE;"> annotation</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Object</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Field</span><span style="color:#9CDCFE;"> field</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#4EC9B0;"> IllegalAccessException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#4EC9B0;">    CharSequence</span><span style="color:#9CDCFE;"> fieldValue</span><span style="color:#D4D4D4;"> = (CharSequence) </span><span style="color:#9CDCFE;">field</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(obj);</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#C586C0;"> new</span><span style="color:#DCDCAA;"> FieldValidResult</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">StringUtils</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasText</span><span style="color:#D4D4D4;">(fieldValue));</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  private</span><span style="color:#569CD6;"> static</span><span style="color:#569CD6;"> final</span><span style="color:#4EC9B0;"> Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Class</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">SUPPORT_TYPE</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">singleton</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">CharSequence</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#4EC9B0;"> Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Class</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">supportType</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> SUPPORT_TYPE;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关联注解和验证器" tabindex="-1"><a class="header-anchor" href="#关联注解和验证器"><span>关联注解和验证器</span></a></h2><p>在 <code>SpelNotBlank</code> 注解上添加 <code>@SpelConstraint</code> 注解，指定该注解的验证器为 <code>SpelNotBlankValidator</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Documented</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Retention</span><span style="color:#D4D4D4;">(RUNTIME)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Target</span><span style="color:#D4D4D4;">(FIELD)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Repeatable</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">SpelNotBlank</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">List</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">SpelConstraint</span><span style="color:#D4D4D4;">(validatedBy = </span><span style="color:#9CDCFE;">SpelNotBlankValidator</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 关联验证器</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> @</span><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> SpelNotBlank</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="使用自定义约束注解" tabindex="-1"><a class="header-anchor" href="#使用自定义约束注解"><span>使用自定义约束注解</span></a></h2>`,20)),n("p",null,[s[1]||(s[1]=a("完成上面的步骤，就可以在需要校验的字段上使用 ")),s[2]||(s[2]=n("code",null,"@SpelNotBlank",-1)),s[3]||(s[3]=a(" 注解了，使用方法就和内置的约束注解一样，")),t(l,{to:"/guide/user-guide.html"},{default:c(()=>s[0]||(s[0]=[a("使用指南")])),_:1}),s[4]||(s[4]=a("。"))]),s[6]||(s[6]=n("p",null,"已经大功告成了，这里我就不举例了。",-1))])}const u=e(D,[["render",d],["__file","custom.html.vue"]]),v=JSON.parse('{"path":"/guide/custom.html","title":"自定义约束注解","lang":"zh-CN","frontmatter":{"description":"自定义约束注解 提示 如果你使用过 jakarta.validation-api 的自定义约束注解，那么你会发现 SpEL Validator 的自定义约束注解几乎与 jakarta.validation-api 一致。 下面以 @SpelNotBlank 为例，展示如何实现自定义约束注解。 创建约束注解类 每个约束注释必须包含以下属性: String...","head":[["meta",{"property":"og:url","content":"https://spel-validator.sticki.cn/guide/custom.html"}],["meta",{"property":"og:site_name","content":"SpEL Validator"}],["meta",{"property":"og:title","content":"自定义约束注解"}],["meta",{"property":"og:description","content":"自定义约束注解 提示 如果你使用过 jakarta.validation-api 的自定义约束注解，那么你会发现 SpEL Validator 的自定义约束注解几乎与 jakarta.validation-api 一致。 下面以 @SpelNotBlank 为例，展示如何实现自定义约束注解。 创建约束注解类 每个约束注释必须包含以下属性: String..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-07T11:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-07T11:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义约束注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-07T11:02:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建约束注解类","slug":"创建约束注解类","link":"#创建约束注解类","children":[]},{"level":2,"title":"创建约束验证器","slug":"创建约束验证器","link":"#创建约束验证器","children":[]},{"level":2,"title":"关联注解和验证器","slug":"关联注解和验证器","link":"#关联注解和验证器","children":[]},{"level":2,"title":"使用自定义约束注解","slug":"使用自定义约束注解","link":"#使用自定义约束注解","children":[]}],"git":{"updatedTime":1730977358000,"contributors":[{"name":"阿杆","email":"sticki@qq.com","commits":3}]},"autoDesc":true,"filePathRelative":"guide/custom.md"}');export{u as comp,v as data};
